/*
 * This source file was generated by the Gradle 'init' task
 */
package com.example.consoleExample;

import com.google.common.io.Files;
import com.my.*;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import static java.lang.System.exit;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import org.apache.commons.cli.*;




public class App {
  static Gson gson = new GsonBuilder().setPrettyPrinting().create();
  static Scanner scan = new Scanner(System.in);
  static JsonActions jAct = new JsonActions();
    
    
    
  public static void main(String[] args) throws IOException {
    AppConfig config = new AppConfig();
    Options options = config.configureOptions();
    config.optionsExecution(options, args);
    ExecutorService exec = Executors.newFixedThreadPool(4);
    Integer port = 7777;
    ServerSocket serverSocket = new ServerSocket(port);
    serverSocket.setSoTimeout(30000);
    
    Runnable startServer = () -> {
      try {
      while (true) {
      System.out.println("waiting for connection");
      exec.submit(new ServerThread(port, serverSocket, serverSocket.accept()));
      }
      } catch (SocketTimeoutException ex) {
        Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        try {
          serverSocket.close();
        } catch (IOException ex1) {
          Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex1);
          exit(1);
        }
      } catch (IOException ex) {
        Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
      }
    };

    
    Callable<String> callableTask = () -> {
      TimeUnit.MILLISECONDS.sleep(20);
      return "callable task done";
    };

    
    
    Future<?> runningServer = exec.submit(startServer);
    
    
    for (int i = 0; i < 5; i++){
      try {
        TimeUnit.SECONDS.sleep(1);
      } catch (InterruptedException ex) {
        Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
      }
      exec.submit(new ClientThread(port, i));
    }
    
    try {
      //exec.invokeAll(taskList);
      System.out.println(exec.submit(callableTask).get());
      runningServer.get();
    } catch (InterruptedException ex) {
      Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
    } catch (ExecutionException ex) {
      Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
    }
    exec.shutdown();
  }
}






class ServerThread implements Runnable{
  ServerSocket serverSocket;
  Socket clientSocket;
  ObjectOutputStream out;
  BufferedReader in;
  int port;
  String fileName;
  String filePath;
  

  public ServerThread(int port, ServerSocket serverSocket, Socket clientSocket) throws IOException {
      this.port = port;
      this.serverSocket = serverSocket;
      this.clientSocket = clientSocket;
      fileName = "telemetry_data_1.json";
      filePath = "C:\\Users\\Andrei\\Documents\\ConsoleExampleDocs\\";
      
  }
  
  @Override
  public void run(){
    try {
      out = new ObjectOutputStream(clientSocket.getOutputStream());
      in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
      System.out.printf("T%s: server: reading input %n", Thread.currentThread().getId());
      String[] meta = in.readLine().split(" ");
      

      if (meta[0].equals("send")){
        System.out.printf("T%s: server: getting values %n", Thread.currentThread().getId());
        String json = in.lines().collect(Collectors.joining());
        fileName = String.format("telemetry_data_%s.json", meta[1]);
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath + fileName))){
          writer.write(json);
        } catch (Exception e) {
        }
      }

      else if (meta[0].equals("get")){
        fileName = String.format("telemetry_data_%s", meta[1]);
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath + fileName))) {
          System.out.println("server: sending values");
          out.writeObject(reader.readLine());
          System.out.println("server: values sent");
        } catch (Exception e) {
        }
        
        out.flush();
      }

      else {
        out.writeBytes("unknown connection");
        System.out.println("server: meta error");
      }

    } catch (IOException ex) {
      Logger.getLogger(ServerThread.class.getName()).log(Level.SEVERE, null, ex);
    }
    System.out.println();
  }
}

class ClientThread implements Runnable{
  private int id;
  private int port;
  public ClientThread(int port, int id) {
    this.id = id;
    this.port = port;
  }

  @Override
  public void run() {
    try {
      TimeUnit.MILLISECONDS.sleep(300);
      System.out.printf("starting SlowClient â„–%s%n", id);
      new SlowClient(port, id).start();
    } catch (IOException ex) {
      Logger.getLogger(ClientThread.class.getName()).log(Level.SEVERE, null, ex);
    } catch (InterruptedException ex) {
      Logger.getLogger(ClientThread.class.getName()).log(Level.SEVERE, null, ex);
    }
  }
  
}

