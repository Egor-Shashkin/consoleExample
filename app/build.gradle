/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'base'
}


tasks.register("task1") {
    println("REGISTER TASK1: This is executed during the configuration phase")
}

tasks.named('run') {
    dependsOn(task1)
    
}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation 'commons-cli:commons-cli:1.8.0'
    implementation libs.guava
    implementation(project(':telemetry'))
    implementation(project(':client'))
    implementation(project(':myUtility'))
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'com.codepoetics:protonpack:1.16'

}



// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(18)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-Xdoclint:none', '-Xlint:none', '-nowarn']
}
application {
    // Define the main class for the application.
    mainClass = 'com.example.consoleExample.App'
}
println("BUILD SCRIPT: This is executed during the configuration phase")

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}





tasks.register("task2") {
    println("REGISTER TASK2: This is executed during the configuration phase")
}

tasks.named("task1") {
    println("NAMED TASK1: This is executed during the configuration phase")
    doFirst {
        println("NAMED TASK1 - doFirst: This is executed during the execution phase")
    }
    doLast {
        println("NAMED TASK1 - doLast: This is executed during the execution phase")
    }
}

tasks.named("task2") {
    println("NAMED TASK2: This is executed during the configuration phase")
    

    doFirst {
        println("NAMED TASK2 - doFirst: This is executed during the execution phase")
    }
    doLast {
        println("NAMED TASK2 - doLast: This is executed during the execution phase")
    }
}


//run(){
//    args=["-r", "C:\\Users\\Andrei\\Documents\\Config.json"]
//}
